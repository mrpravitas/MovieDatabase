@page "/movies"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieDatabase.Models
@using MovieDatabase.Data
@implements IAsyncDisposable
@inject IDbContextFactory<MovieDatabase.Data.MovieDatabaseContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<input type="search" @bind="titleFilter" @bind:event="oninput" />

<p>
    <a href="movies/create">Create New</a>
</p>

<div>
    <QuickGrid Class="table" Items="FilteredMovies" Pagination="pagination">
        <PropertyColumn Property="movie => movie.Title" Sortable="true"/>
        <PropertyColumn Property="movie => movie.ReleaseDate" Title="Release Date" />
        <PropertyColumn Property="movie => movie.Genre" />
        <PropertyColumn Property="movie => movie.Price" />
        <PropertyColumn Property="movie => movie.Rating" />

        <TemplateColumn Context="movie">
            <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
            <a href="@($"movies/details?id={movie.Id}")">Details</a> |
            <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
</div>
<Paginator State="pagination"/>

@code {
    private MovieDatabaseContext context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private string titleFilter = string.Empty;

    private IQueryable<Movie> FilteredMovies => context.Movie.Where(m => m.Title!.Contains(titleFilter));

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
}
